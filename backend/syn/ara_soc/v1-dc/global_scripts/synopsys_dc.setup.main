###     define log file
set start_time [clock seconds]
set log_file_tail 0
set cur_shell_run_path  [pwd]
set log_file dc.out
while {[file isfile $log_file]} {
        incr log_file_tail 1
        set log_file dc.out.$log_file_tail
}
set_app_var sh_output_log_file $log_file

set sram_mc "/home/wangwy/technical_library/tsmc28nm/Memory/tsn28hpcpd127spsram_20120200_180a/AN61001_20180416/tsn28hpcpd127spsram_20120200_180a/TSMCHOME/sram/Compiler/tsn28hpcpd127spsram_20120200_180a/tsn28hpcpd127spsram_20120200_180a/ts1n28hpcpsvtb8192x128m4swbaso_180a/DB/ts1n28hpcpsvtb8192x128m4swbaso_180a_tt0p9v25c.db /home/wangwy/technical_library/tsmc28nm/Memory/tsn28hpcpuhdspsram_20120200_170a/AN61001_20180125/tsn28hpcpuhdspsram_20120200_170a/TSMCHOME/sram/Compiler/tsn28hpcpuhdspsram_20120200_170a/tsn28hpcpuhdspsram_20120200_170a/ts1n28hpcpuhdsvtb16x64m1swbso_170a/DB/ts1n28hpcpuhdsvtb16x64m1swbso_170a_tt0p9v25c.db /home/wangwy/technical_library/tsmc28nm/Memory/tsn28hpcpuhdspsram_20120200_170a/AN61001_20180125/tsn28hpcpuhdspsram_20120200_170a/TSMCHOME/sram/Compiler/tsn28hpcpuhdspsram_20120200_170a/tsn28hpcpuhdspsram_20120200_170a/ts1n28hpcpuhdsvtb64x128m4swbso_170a/DB/ts1n28hpcpuhdsvtb64x128m4swbso_170a_tt0p9v25c.db /home/wangwy/technical_library/tsmc28nm/Memory/tsn28hpcpuhdspsram_20120200_170a/AN61001_20180125/tsn28hpcpuhdspsram_20120200_170a/TSMCHOME/sram/Compiler/tsn28hpcpuhdspsram_20120200_170a/tsn28hpcpuhdspsram_20120200_170a/ts1n28hpcpuhdsvtb64x256m1swbso_170a/DB/ts1n28hpcpuhdsvtb64x256m1swbso_170a_tt0p9v25c.db /home/wangwy/technical_library/tsmc28nm/Memory/tsn28hpcpuhdspsram_20120200_170a/AN61001_20180125/tsn28hpcpuhdspsram_20120200_170a/TSMCHOME/sram/Compiler/tsn28hpcpuhdspsram_20120200_170a/tsn28hpcpuhdspsram_20120200_170a/ts1n28hpcpuhdsvtb64x48m4swbso_170a/DB/ts1n28hpcpuhdsvtb64x48m4swbso_170a_tt0p9v25c.db"

set search_path                 "$GUI_WORK_DIR/inputs $GUI_WORK_DIR/inputs/inc "
set target_library              "/home/wangwy/technical_library/tsmc28nm/logic/tcbn28hpcplusbwp12t40p140_180a/AN61001_20180514/tcbn28hpcplusbwp12t40p140_180a_nldm/TSMCHOME/digital/Front_End/timing_power_noise/NLDM/tcbn28hpcplusbwp12t40p140_180a/tcbn28hpcplusbwp12t40p140tt0p9v25c.db $sram_mc"
set synthetic_library           "/home/wangwy/software/synopsys/install/syn/syn/T-2022.03-SP2/libraries/syn/dw_foundation.sldb"
set link_library                "* $target_library $synthetic_library"
set milkyway_library            {}
set violation_opt               {}
set hierarchy_opt               {-hierarchy}
set compile_ultra_hier_opt      {}
set report_area_phy_opt         {}

foreach key [array names STD_LIBRARY_LIST] {
        set lib_type [lindex [split $key ,] 0]
        set lib_pvt  [lindex [split $key ,] 1]
        if {$lib_pvt == $GUI_PVT} {
                append link_library     "$STD_LIBRARY_LIST($key) "
                append target_library   "$STD_LIBRARY_LIST($key) "
                append milkyway_library "$STD_PHYSICAL_LIB($lib_type) "
        }
}

foreach key [array names IP_LIBRARY_LIST] {
        set lib_type [lindex [split $key ,] 0]
        set lib_pvt  [lindex [split $key ,] 1]
        if {[regexp " $lib_type " " $GUI_IP_LIBRARY "] && $lib_pvt == $GUI_PVT} {
                append link_library     "$IP_LIBRARY_LIST($key) "
                append milkyway_library "$IP_PHYSICAL_LIB($lib_type) "
        }
}

#set_attribute [get_lib_cells */*] dont_use true

foreach key [array names STD_LIBRARY_LIST] {
        set lib_type [lindex [split $key ,] 0]
        if {[regexp " $lib_type " " $GUI_STD_LIBRARY "]} {
                set_attribute [get_lib_cells */$STD_LIBRARY_PREFIX($lib_type)*$STD_LIBRARY_POSTFIX($lib_type)] dont_use false
        }
}

source -e -v $GUI_DONTUSE_FILE

append link_library {}

suppress_message CMD-041
suppress_message UID-348
set_message_info -limit 5 -id PWR-537
set_message_info -limit 5 -id UID-401
if {$GUI_DCG_MODE} {
        set_message_info -limit 5 -id TFCHK-035
        set_message_info -limit 5 -id TFCHK-072
        set_message_info -limit 5 -id TLUP-004
        set_message_info -limit 5 -id TLUP-005
        set_message_info -limit 5 -id MWLIBP-324
        set_message_info -limit 5 -id PSYN-024
        set_message_info -limit 5 -id PSYN-039
        set_message_info -limit 5 -id PSYN-650
        set_message_info -limit 5 -id PSYN-651
        set_message_info -limit 5 -id PSYN-058

        set_tlu_plus_files -max_tluplus $MILKYWAY_TLUPLUS($GUI_TLU) -min_tluplus $MILKYWAY_TLUPLUS($GUI_TLU) -tech2itf_map $MILKYWAY_ITFMAP
}

### proc ###
proc get_instance_name {filename} {
        set F [open $filename r]
        set lists ""
        while {![eof $F]} {
                [gets $F line]
                if {[regexp {^#} $line] || ![regexp {\S} $line]} { continue }
                regexp {(\S+)\s+(\S+)} $line total cellname instancename
                lappend lists $cellname
                lappend lists $instancename
        }
        close $F
        return $lists
}

proc report_runtime {} {
        global starttime
        global endtime

        set day  0
        set hour 0
        set min  0
        set sec  [expr $endtime - $starttime]
        set seconds $sec
        if {$sec >= 86400} {
                set day  [expr $sec / 86400]
                set sec  [expr $sec - $day  * 86400]
        }
        if {$sec >= 3600} {
                set hour [expr $sec / 3600]
                set sec  [expr $sec - $hour * 3600]
        }
        if {$sec >= 60} {
                set min  [expr $sec / 60]
                set sec  [expr $sec - $min  * 60]
        }

        puts "\n----------------------------------------"
        puts [format "Start Time : %s" [clock format $starttime -format "%Y-%m-%d %H:%M:%S"]]
        puts [format "End   Time : %s" [clock format $endtime   -format "%Y-%m-%d %H:%M:%S"]]
        if {$day} { puts [format "Total Time : %dday %02d:%02d:%02d (%ss)" $day $hour $min $sec $seconds]
        } else    { puts [format "Total Time : %02d:%02d:%02d (%ss)" $hour $min $sec $seconds] }
        puts "----------------------------------------\n"
}

##------------------------------------------------
## Procedure to print message
##------------------------------------------------
proc proc_print_msg { args } {
        parse_proc_arguments -args $args options
        if { [info exists options(-E)] } {
                echo "ERROR: $options(-E)"
        } elseif { [info exists options(-W)] } {
                echo "WARNING: $options(-W)"
        } elseif { [info exists options(-I)] } {
                echo "INFO: $options(-I)"
        }
}
define_proc_attributes proc_print_msg \
        -info "Print messages." \
        -define_args {
        {-E "Print ERROR type message" AString string optional} \
        {-W "Print WARNING type message" AString string optional} \
        {-I "Print INFO type message" AString string optional} \
}

